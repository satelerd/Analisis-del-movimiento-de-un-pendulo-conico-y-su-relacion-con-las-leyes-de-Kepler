data1 = [(-0.138, 0.0), (-0.128, -0.03799), (-0.116, -0.05057),
        (-0.101, -0.0609), (-0.08234, -0.06952), (-0.06341, -0.07583),
        (-0.04505, -0.07898), (-0.02496, -0.08099), (-0.004592, -0.08013),
        (0.01463, -0.07726), (0.03042, -0.07295), (0.04964, -0.06664),
        (0.06456, -0.05775), (0.07718, -0.04828), (0.08779, -0.0368),
        (0.09726, -0.02389), (0.102, -0.01184), (0.103, 0.003076),
        (0.103, 0.01771), (0.09984, 0.03263), (0.09267, 0.04583),
        (0.08234, 0.05788), (0.0703, 0.06964), (0.05681, 0.07969),
        (0.04017, 0.08772), (0.02238, 0.09289), (0.003735, 0.09719),
        (-0.0155, 0.09862), (-0.03586, 0.09776), (-0.05537, 0.09489),
        (-0.07374, 0.09001), (-0.09153, 0.08254), (-0.107, 0.07194),
        (-0.121, 0.06104), (-0.131, 0.04842), (-0.14, 0.03379),
        (-0.145, 0.01829), (-0.146, 0.003646), (-0.144, -0.01183),
        (-0.138, -0.02733), (-0.13, -0.0411), (-0.118, -0.05316),
        (-0.104, -0.06434), (-0.0881, -0.07354), (-0.07058, -0.07957),
        (-0.05221, -0.08385), (-0.03357, -0.08673)]

data2 = [
(-0.1180000, -0.0122700), (-0.1190000, -0.0322700), (-0.1150000, -0.0550200), (-0.1100000, -0.0737800), (-0.0952900, -0.0916400),
(-0.0937300, -0.1070000), (-0.0838700, -0.1190000), (-0.0617100, -0.1330000), (-0.0591300, -0.1340000), (-0.0474400, -0.1380000),
(-0.0286700, -0.1420000), (-0.0120700, -0.1380000), (0.0076170, -0.1350000), (0.0251500, -0.1250000), (0.0405200, -0.1140000),
(0.0534300, -0.1010000), (0.0642100, -0.0852900), (0.0728100, -0.0677600), (0.0740500, -0.0480700), (0.0752600, -0.0268800),
(0.0773100, -0.0078390), (0.0767500, 0.0106500), (0.0737500, 0.0303600), (0.0688300, 0.0478700), (0.0626500, 0.0622900),
(0.0561900, 0.0758400), (0.0451300, 0.0891000), (0.0340500, 0.0988700), (0.0199000, 0.1050000), (0.0029940, 0.1080000),
(-0.0130000, 0.1100000), (-0.0277600, 0.1080000), (-0.0443700, 0.1010000), (-0.0597400, 0.0936500), (-0.0745000, 0.0828900),
(-0.0867900, 0.0690500), (-0.0981800, 0.0527700), (-0.1070000, 0.0361800), (-0.1150000, 0.0180400), (-0.1180000, -0.0013400),
(-0.1200000, -0.0210500), (-0.1200000, -0.0404000), (-0.1170000, -0.0591800), (-0.1100000, -0.0773200), (-0.1020000, -0.0936200),
(-0.0917100, -0.1080000)
]

data3 = [(-0.0352000, -0.1410000), (-0.0296200, -0.1500000), (-0.0141500, -0.1580000), (0.0128500, -0.1620000), (0.0297800, -0.1660000), (0.0466000, -0.1640000), (0.0626100, -0.1570000), (0.0777200, -0.1490000), (0.0909400, -0.1370000), (0.1030000, -0.1220000), (0.1120000, -0.1050000), (0.1190000, -0.0892300), (0.1240000, -0.0712700), (0.1270000, -0.0560900), (0.1270000, -0.0368900), (0.1260000, -0.0170700), (0.1210000, 0.0005919), (0.1140000, 0.0176300), (0.1040000, 0.0343500), (0.0929400, 0.0489100), (0.0808800, 0.0684300), (0.0669600, 0.0808200), (0.0507900, 0.0891900), (0.0338100, 0.0947600), (0.0158500, 0.0851500), (-0.0010350, 0.0829800), (-0.0168000, 0.0780300), (-0.0312900, 0.0817300), (-0.0452800, 0.0693600), (-0.0576000, 0.0569200), (-0.0674600, 0.0318600), (-0.0746200, 0.0151500), (-0.0798300, -0.0080800), (-0.0814300, -0.0275900), (-0.0805100, -0.0477300), (-0.0773800, -0.0694100), (-0.0709500, -0.0883100), (-0.0616700, -0.1060000), (-0.0505800, -0.1220000), (-0.0372700, -0.1360000), (-0.0226900, -0.1480000), (-0.0067520, -0.1560000), (0.0101800, -0.1610000), (0.0272500, -0.1630000), (0.0440600, -0.1620000), (0.0601500, -0.1570000)]


import matplotlib.pyplot as plt
import math
import numpy as np
import pandas as pd



def extract_coordinates(data):
    x = [point[0] for point in data]
    y = [point[1] for point in data]
    return x, y

def calculate_semi_axes(x, y):
    min_x, max_x = min(x), max(x)
    min_y, max_y = min(y), max(y)
    a = (max_x - min_x) / 2
    b = (max_y - min_y) / 2
    return a, b

def calculate_focal_distance(a, b): 
    # cuaando se usa la data 2 o 3, hay que agregar un *-1 dentro de la raiz cuadrada
    try:
        return math.sqrt((a**2 - b**2))
    except:
        return math.sqrt((a**2 - b**2)*-1)


def calculate_areas(x, y, t, intervals):
    areas = []
    step = len(x) // intervals
    for i in range(0, len(x) - step, step):
        x1, y1, t1 = x[i], y[i], t[i]
        x2, y2, t2 = x[i + step], y[i + step], t[i + step]
        area = 0.5 * abs(x1 * y2 - x2 * y1) * (t2 - t1)
        areas.append(area)
    return areas

def save_coordinates_to_excel(x, y, file_name):
    data_dict = {'Coordenada X': x, 'Coordenada Y': y}
    df = pd.DataFrame(data_dict)

    # Reemplazar puntos por comas para los decimales
    df = df.applymap(lambda x: str(x).replace('.', ','))

    # Guardar en archivo de Excel
    writer = pd.ExcelWriter(file_name, engine='openpyxl')
    df.to_excel(writer, index=False)
    writer.save()


def plot_trajectory_and_ellipse(x, y, a, b, c):
    plt.scatter(x, y, label='Trayectoria del péndulo')

    center_x, center_y = (max(x) + min(x)) / 2, (max(y) + min(y)) / 2
    plt.plot([center_x, center_x + a], [center_y, center_y], 'r-', label='Semieje mayor (a)')
    plt.plot([center_x, center_x], [center_y, center_y + b], 'g-', label='Semieje menor (b)')
    plt.scatter([center_x + c, center_x - c], [center_y, center_y], color='red', label='Focos')

    # Dibujar elipse
    angle = np.linspace(0, 2 * np.pi, 100)
    elipse_x = center_x + a * np.cos(angle)
    elipse_y = center_y + b * np.sin(angle)
    plt.plot(elipse_x, elipse_y, 'b-', label='Elipse ajustada')

    plt.xlabel('Posición en x')
    plt.ylabel('Posición en y')
    plt.title('Comparación de la elipse ajustada y la trayectoria real')
    plt.legend(loc='upper right')
    plt.show()


x, y = extract_coordinates(data1)
# save_coordinates_to_excel(x, y, 'coordenadas2.xlsx')
a, b = calculate_semi_axes(x, y)
c = calculate_focal_distance(a, b)


print(f'Semieje mayor (a): {a:.4f} m')
print(f'Semieje menor (b): {b:.4f} m')
print(f'punto focal (c): {c:.4f} m')
print(f'Excentricidad (c/a): {c / a:.4f}')

plot_trajectory_and_ellipse(x, y, a, b, c)
